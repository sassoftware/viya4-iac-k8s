# Copyright Â© 2022-2024, SAS Institute Inc., Cary, NC, USA. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

---
#
# Installing Kubernetes tooling
#

# Only applicable for releases older than Ubuntu 22.04
- name: Create /etc/apt/keyrings directory
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: "0755"
    owner: root
    group: root
  when: ansible_distribution == "Ubuntu" and (ansible_distribution_version == "20.04")
  tags:
    - install
    - update

- name: Set kubernetes version facts for toolbox installation
  set_fact:
    k8s_version_semantic_parts: "{{ kubernetes_version.split('.') }}"
  tags:
    - install
    - update

- name: Set kubernetes version part facts for toolbox installation
  set_fact:
    k8s_major_version: "{% if k8s_version_semantic_parts|length > 0 %}{{ k8s_version_semantic_parts.0 }}{% endif %}"
    k8s_minor_version: "{% if k8s_version_semantic_parts|length > 1 %}{{ k8s_version_semantic_parts.1 }}{% endif %}"
    k8s_patch_version: "{% if k8s_version_semantic_parts|length > 2 %}{{ k8s_version_semantic_parts.2 }}{% else %}0{% endif %}"
  tags:
    - install
    - update

# Apply Kubernetes public signing key
- name: Apply Kubernetes public signing key
  ansible.builtin.get_url:
    url: "https://pkgs.k8s.io/core:/stable:/v{{ k8s_major_version }}.{{ k8s_minor_version }}/deb/Release.key"
    dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
  when: ansible_distribution == "Ubuntu" and (ansible_distribution_version == "20.04" or ansible_distribution_version == "22.04")
  tags:
    - install
    - update

# Add Kubernetes apt repository
- name: Add Kubernetes apt repository
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v{{ k8s_major_version }}.{{ k8s_minor_version }}/deb/ /"
    state: present
    update_cache: true
  when: ansible_distribution == "Ubuntu" and (ansible_distribution_version == "20.04" or ansible_distribution_version == "22.04")
  tags:
    - install
    - update

- name: Download crictl
  ansible.builtin.get_url:
    url: https://github.com/kubernetes-sigs/cri-tools/releases/download/v{{ k8s_major_version }}.{{ k8s_minor_version }}.0/crictl-v{{ k8s_major_version }}.{{ k8s_minor_version }}.0-linux-amd64.tar.gz
    dest: /tmp/crictl-v{{ k8s_major_version }}.{{ k8s_minor_version }}.0-linux-amd64.tar.gz
    mode: "0755"
  when: kubernetes_cri|lower != 'docker'
  tags:
    - install
    - update

- name: Install crictl
  ansible.builtin.unarchive:
    src: /tmp/crictl-v{{ k8s_major_version }}.{{ k8s_minor_version }}.0-linux-amd64.tar.gz
    dest: /usr/local/bin
    remote_src: true
  when: kubernetes_cri|lower != 'docker'
  tags:
    - install
    - update

- name: Generate crictl.yaml file for docker
  ansible.builtin.shell: |
    cat >> /etc/crictl.yaml << EOF
    runtime-endpoint: unix:///var/run/dockershim.sock
    image-endpoint: unix:///var/run/dockershim.sock
    timeout: 10
    debug: false
    EOF
  when: kubernetes_cri|lower == 'docker'
  tags:
    - install
    - update

- name: Generate crictl.yaml file for containerd
  ansible.builtin.shell: |
    cat >> /etc/crictl.yaml << EOF
    runtime-endpoint: unix:///run/containerd/containerd.sock
    image-endpoint: unix:///run/containerd/containerd.sock
    timeout: 10
    debug: false
    EOF
  when: kubernetes_cri|lower == 'containerd'
  tags:
    - install
    - update

- name: Generate crictl.yaml file for cri-o
  ansible.builtin.shell: |
    cat >> /etc/crictl.yaml << EOF
    runtime-endpoint: unix:///var/run/crio/crio.sock
    image-endpoint: unix:///var/run/crio/crio.sock
    timeout: 10
    debug: false
    EOF
  when: kubernetes_cri|lower == 'cri-o'
  tags:
    - install
    - update

# Update apt package index and install kubelet, kubeadm, kubectl
- name: Update apt package index and install kubelet, kubeadm, kubectl
  ansible.builtin.apt:
    pkg:
      - kubelet={{ kubernetes_version }}-{{ kube_deb_rev }}
      - kubeadm={{ kubernetes_version }}-{{ kube_deb_rev }}
      - kubectl={{ kubernetes_version }}-{{ kube_deb_rev }}
    state: present
    update_cache: true
  when: ansible_distribution == "Ubuntu" and (ansible_distribution_version == "20.04" or ansible_distribution_version == "22.04")
  tags:
    - install

# Mark the packages to hold as we control the version ;)
- name: Mark the packages to hold as we control the version ;)
  ansible.builtin.dpkg_selections:
    name: "{{ item }}"
    selection: hold
  with_items:
    - kubelet
    - kubeadm
    - kubectl
  when: ansible_distribution == "Ubuntu" and (ansible_distribution_version == "20.04" or ansible_distribution_version == "22.04")
  tags:
    - install

- name: Mark the packages to purge as we control the version ;)
  ansible.builtin.dpkg_selections:
    name: "{{ item }}"
    selection: purge
  with_items:
    - kubelet
    - kubeadm
    - kubectl
  when: ansible_distribution == "Ubuntu" and (ansible_distribution_version == "20.04" or ansible_distribution_version == "22.04")
  tags:
    - uninstall

- name: Update apt package index and remove kubelet, kubeadm, kubectl
  ansible.builtin.apt:
    pkg:
      - kubelet={{ kubernetes_version }}-{{ kube_deb_rev }}
      - kubeadm={{ kubernetes_version }}-{{ kube_deb_rev }}
      - kubectl={{ kubernetes_version }}-{{ kube_deb_rev }}
    state: absent
    update_cache: true
  when: ansible_distribution == "Ubuntu" and (ansible_distribution_version == "20.04" or ansible_distribution_version == "22.04")
  tags:
    - uninstall

# TODO : Revisit when finishing cri-o integration
# - name: Reboot machines for cni networking with cri
#   ansible.builtin.reboot:
#   tags:
#     - install
