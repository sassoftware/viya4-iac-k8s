# Ansible items
ansible_user     : "${ ansible_user }"
ansible_password : "${ ansible_password }"

# VM items
vm_os   : "ubuntu" # Choices : [ubuntu|rhel] - Ubuntu 22.04 LTS / RHEL ???
vm_arch : "amd64"  # Choices : [amd64] - 64-bit OS / ???

# System items
enable_cgroup_v2    : true                       # TODO - If needed hookup or remove flag
system_ssh_keys_dir : "${ system_ssh_keys_dir }" # Directory holding public keys to be used on each system

# Generic items
prefix          : "${ prefix }"
deployment_type : "${ deployment_type }"

# Kubernetes - Common
#
# TODO: kubernetes_upgrade_allowed needs to be implemented to either
#       add or remove locks on the kubeadm, kubelet, kubectl packages
#
kubernetes_cluster_name    : "{{ prefix }}-oss" # NOTE: only change the prefix value above
kubernetes_version         : "${ cluster_version }"
kubernetes_upgrade_allowed : true
kubernetes_arch            : "{{ vm_arch }}"
kubernetes_cni             : "${ cluster_cni }"
kubernetes_cni_version     : "${ cluster_cni_version }"
kubernetes_cri             : "${ cluster_cri }"
kubernetes_cri_version     : "${ cluster_cri_version }"
kubernetes_service_subnet  : "${ cluster_service_subnet }"
kubernetes_pod_subnet      : "${ cluster_pod_subnet }"

# Kubernetes - VIP : https://kube-vip.io
# 
# Useful links:
#
#   VIP IP Address : https://kube-vip.io/docs/installation/static/
#
kubernetes_vip_version : "${ cluster_vip_version }"
kubernetes_vip_ip      : "${ cluster_vip_ip }"
kubernetes_vip_fqdn    : "${ cluster_vip_fqdn }"

# Kubernetes - Load Balancer

#
# Load Balancer Type
#
kubernetes_loadbalancer : "${ cluster_lb_type }" # Load Balancer accepted values [kube_vip,metallb]

#
# Load Balancer Addresses
#
# Examples for each load balancer type can be found here:
#
#  kube-vip address format : https://kube-vip.io/docs/usage/cloud-provider/#the-kube-vip-cloud-provider-configmap
#  MetalLB address format  : https://metallb.universe.tf/configuration/#layer-2-configuration
#
#    kube-vip sample:
#
#      kubernetes_loadbalancer_addresses :
#        - "cidr-default: 192.168.0.200/29"                  # CIDR-based IP range for use in the default Namespace
#        - "range-development: 192.168.0.210-192.168.0.219"  # Range-based IP range for use in the development Namespace
#        - "cidr-finance: 192.168.0.220/29,192.168.0.230/29" # Multiple CIDR-based ranges for use in the finance Namespace
#        - "cidr-global: 192.168.0.240/29"                   # CIDR-based range which can be used in any Namespace
#
#    MetalLB sample:
#
#      kubernetes_loadbalancer_addresses :
#        - "192.168.10.0/24"
#        - "192.168.9.1-192.168.9.5"
#
#  NOTE: If you are assigning a static IP using the loadBalancerIP value for your 
#        load balancer controller service when using `metallb` that IP must fall
#        within the address range you provide below. If you are using `kube_vip`
#        you do not have this limitation.
#
kubernetes_loadbalancer_addresses :
%{ for v in cluster_lb_addresses ~}
  ${format("- \"%s\"\n", v)~}
%{ endfor ~}

# Kubernetes - Control Plane
control_plane_ssh_key_name : ${ control_plane_ssh_key_name }

# Labels/Taints
#
#   The label names match the host names to apply these items
#   If the node names do not match you'll have to apply these
#   taints/labels by hand.
#
#   The format the label block is:
#
#       node_labels:
#         <node name pattern>:
#           - <label>
#           - <label>
#
#       The format the taint block is:
#
#       node_taints:
#         <node name pattern>:
#           - <taint>
#           - <taint>
#
#   NOTE: There are no quotes around the label and taint elements
#         These are literal converted to strings when applying
#         into the cluster
# 

## Labels
%{ if length(node_labels) != 0 ~}
node_labels:
%{ for k, v in node_labels ~}
%{ if length(v) != 0 ~}
  ${format("%s:\n", k)~}
%{ for lv in v ~}
  ${format("  - %s\n", lv)~}
%{ endfor ~}
%{ endif ~}
%{ endfor ~}
%{ endif ~}

## Taints
%{if length(node_taints) != 0 ~}
node_taints:
%{ for k, v in node_taints ~}
%{ if length(v) != 0 ~}
  ${format("%s:\n", k)~}
%{ for tv in v ~}
  ${format("  - %s\n", tv)~}
%{ endfor ~}
%{ endif ~}
%{ endfor ~}
%{ endif ~}

%{ if jump_ip != null ~}
%{ if length(jump_ip) != 0 ~}
# Jump Server
jump_ip : "${jump_ip}"
%{ endif ~}
%{ endif ~}

%{ if nfs_ip != null ~}
%{ if length(nfs_ip) != 0 ~}
# NFS Server
nfs_ip  : "${nfs_ip}"
%{ endif ~}
%{ endif ~}

%{ if cr_ip != null ~}
%{ if length(cr_ip) != 0 ~}
# Container Registry
cr_ip   : "${cr_ip}"
%{ endif ~}
%{ endif ~}
